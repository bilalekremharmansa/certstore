// Code generated by MockGen. DO NOT EDIT.
// Source: internal/lego/adapter.go

// Package lego is a generated GoMock package.
package lego

import (
	reflect "reflect"

	certificate "github.com/go-acme/lego/v4/certificate"
	gomock "github.com/golang/mock/gomock"
)

// MockLegoAdapter is a mock of LegoAdapter interface.
type MockLegoAdapter struct {
	ctrl     *gomock.Controller
	recorder *MockLegoAdapterMockRecorder
}

// MockLegoAdapterMockRecorder is the mock recorder for MockLegoAdapter.
type MockLegoAdapterMockRecorder struct {
	mock *MockLegoAdapter
}

// NewMockLegoAdapter creates a new mock instance.
func NewMockLegoAdapter(ctrl *gomock.Controller) *MockLegoAdapter {
	mock := &MockLegoAdapter{ctrl: ctrl}
	mock.recorder = &MockLegoAdapterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLegoAdapter) EXPECT() *MockLegoAdapterMockRecorder {
	return m.recorder
}

// Obtain mocks base method.
func (m *MockLegoAdapter) Obtain(req certificate.ObtainRequest) (*certificate.Resource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Obtain", req)
	ret0, _ := ret[0].(*certificate.Resource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Obtain indicates an expected call of Obtain.
func (mr *MockLegoAdapterMockRecorder) Obtain(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Obtain", reflect.TypeOf((*MockLegoAdapter)(nil).Obtain), req)
}
