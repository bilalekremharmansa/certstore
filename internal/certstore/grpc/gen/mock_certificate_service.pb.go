// Code generated by MockGen. DO NOT EDIT.
// Source: internal/certstore/grpc/gen/certificate_service_grpc.pb.go

// Package gen is a generated GoMock package.
package gen

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockCertificateServiceClient is a mock of CertificateServiceClient interface.
type MockCertificateServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockCertificateServiceClientMockRecorder
}

// MockCertificateServiceClientMockRecorder is the mock recorder for MockCertificateServiceClient.
type MockCertificateServiceClientMockRecorder struct {
	mock *MockCertificateServiceClient
}

// NewMockCertificateServiceClient creates a new mock instance.
func NewMockCertificateServiceClient(ctrl *gomock.Controller) *MockCertificateServiceClient {
	mock := &MockCertificateServiceClient{ctrl: ctrl}
	mock.recorder = &MockCertificateServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCertificateServiceClient) EXPECT() *MockCertificateServiceClientMockRecorder {
	return m.recorder
}

// IssueCertificate mocks base method.
func (m *MockCertificateServiceClient) IssueCertificate(ctx context.Context, in *CertificateRequest, opts ...grpc.CallOption) (*CertificateResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "IssueCertificate", varargs...)
	ret0, _ := ret[0].(*CertificateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IssueCertificate indicates an expected call of IssueCertificate.
func (mr *MockCertificateServiceClientMockRecorder) IssueCertificate(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IssueCertificate", reflect.TypeOf((*MockCertificateServiceClient)(nil).IssueCertificate), varargs...)
}

// MockCertificateServiceServer is a mock of CertificateServiceServer interface.
type MockCertificateServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockCertificateServiceServerMockRecorder
}

// MockCertificateServiceServerMockRecorder is the mock recorder for MockCertificateServiceServer.
type MockCertificateServiceServerMockRecorder struct {
	mock *MockCertificateServiceServer
}

// NewMockCertificateServiceServer creates a new mock instance.
func NewMockCertificateServiceServer(ctrl *gomock.Controller) *MockCertificateServiceServer {
	mock := &MockCertificateServiceServer{ctrl: ctrl}
	mock.recorder = &MockCertificateServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCertificateServiceServer) EXPECT() *MockCertificateServiceServerMockRecorder {
	return m.recorder
}

// IssueCertificate mocks base method.
func (m *MockCertificateServiceServer) IssueCertificate(arg0 context.Context, arg1 *CertificateRequest) (*CertificateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IssueCertificate", arg0, arg1)
	ret0, _ := ret[0].(*CertificateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IssueCertificate indicates an expected call of IssueCertificate.
func (mr *MockCertificateServiceServerMockRecorder) IssueCertificate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IssueCertificate", reflect.TypeOf((*MockCertificateServiceServer)(nil).IssueCertificate), arg0, arg1)
}

// mustEmbedUnimplementedCertificateServiceServer mocks base method.
func (m *MockCertificateServiceServer) mustEmbedUnimplementedCertificateServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedCertificateServiceServer")
}

// mustEmbedUnimplementedCertificateServiceServer indicates an expected call of mustEmbedUnimplementedCertificateServiceServer.
func (mr *MockCertificateServiceServerMockRecorder) mustEmbedUnimplementedCertificateServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedCertificateServiceServer", reflect.TypeOf((*MockCertificateServiceServer)(nil).mustEmbedUnimplementedCertificateServiceServer))
}

// MockUnsafeCertificateServiceServer is a mock of UnsafeCertificateServiceServer interface.
type MockUnsafeCertificateServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeCertificateServiceServerMockRecorder
}

// MockUnsafeCertificateServiceServerMockRecorder is the mock recorder for MockUnsafeCertificateServiceServer.
type MockUnsafeCertificateServiceServerMockRecorder struct {
	mock *MockUnsafeCertificateServiceServer
}

// NewMockUnsafeCertificateServiceServer creates a new mock instance.
func NewMockUnsafeCertificateServiceServer(ctrl *gomock.Controller) *MockUnsafeCertificateServiceServer {
	mock := &MockUnsafeCertificateServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeCertificateServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeCertificateServiceServer) EXPECT() *MockUnsafeCertificateServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedCertificateServiceServer mocks base method.
func (m *MockUnsafeCertificateServiceServer) mustEmbedUnimplementedCertificateServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedCertificateServiceServer")
}

// mustEmbedUnimplementedCertificateServiceServer indicates an expected call of mustEmbedUnimplementedCertificateServiceServer.
func (mr *MockUnsafeCertificateServiceServerMockRecorder) mustEmbedUnimplementedCertificateServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedCertificateServiceServer", reflect.TypeOf((*MockUnsafeCertificateServiceServer)(nil).mustEmbedUnimplementedCertificateServiceServer))
}
