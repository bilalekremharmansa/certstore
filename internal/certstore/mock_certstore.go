// Code generated by MockGen. DO NOT EDIT.
// Source: internal/certstore/certstore.go

// Package certstore is a generated GoMock package.
package certstore

import (
	reflect "reflect"

	service "bilalekrem.com/certstore/internal/certificate/service"
	gomock "github.com/golang/mock/gomock"
)

// MockCertStore is a mock of CertStore interface.
type MockCertStore struct {
	ctrl     *gomock.Controller
	recorder *MockCertStoreMockRecorder
}

// MockCertStoreMockRecorder is the mock recorder for MockCertStore.
type MockCertStoreMockRecorder struct {
	mock *MockCertStore
}

// NewMockCertStore creates a new mock instance.
func NewMockCertStore(ctrl *gomock.Controller) *MockCertStore {
	mock := &MockCertStore{ctrl: ctrl}
	mock.recorder = &MockCertStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCertStore) EXPECT() *MockCertStoreMockRecorder {
	return m.recorder
}

// CreateClusterCACertificate mocks base method.
func (m *MockCertStore) CreateClusterCACertificate(clusterName string) (*service.NewCertificateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateClusterCACertificate", clusterName)
	ret0, _ := ret[0].(*service.NewCertificateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateClusterCACertificate indicates an expected call of CreateClusterCACertificate.
func (mr *MockCertStoreMockRecorder) CreateClusterCACertificate(clusterName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateClusterCACertificate", reflect.TypeOf((*MockCertStore)(nil).CreateClusterCACertificate), clusterName)
}

// CreateServerCertificate mocks base method.
func (m *MockCertStore) CreateServerCertificate(advertisedServerName string) (*service.NewCertificateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateServerCertificate", advertisedServerName)
	ret0, _ := ret[0].(*service.NewCertificateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateServerCertificate indicates an expected call of CreateServerCertificate.
func (mr *MockCertStoreMockRecorder) CreateServerCertificate(advertisedServerName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateServerCertificate", reflect.TypeOf((*MockCertStore)(nil).CreateServerCertificate), advertisedServerName)
}

// CreateWorkerCertificate mocks base method.
func (m *MockCertStore) CreateWorkerCertificate(address string) (*service.NewCertificateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWorkerCertificate", address)
	ret0, _ := ret[0].(*service.NewCertificateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWorkerCertificate indicates an expected call of CreateWorkerCertificate.
func (mr *MockCertStoreMockRecorder) CreateWorkerCertificate(address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWorkerCertificate", reflect.TypeOf((*MockCertStore)(nil).CreateWorkerCertificate), address)
}

// IssueCertificate mocks base method.
func (m *MockCertStore) IssueCertificate(arg0 string, arg1 *service.NewCertificateRequest) (*service.NewCertificateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IssueCertificate", arg0, arg1)
	ret0, _ := ret[0].(*service.NewCertificateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IssueCertificate indicates an expected call of IssueCertificate.
func (mr *MockCertStoreMockRecorder) IssueCertificate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IssueCertificate", reflect.TypeOf((*MockCertStore)(nil).IssueCertificate), arg0, arg1)
}
